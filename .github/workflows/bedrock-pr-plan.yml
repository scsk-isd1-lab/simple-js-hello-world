name: Bedrock PR Plan

on:
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AWS_REGION: "ap-northeast-1"

jobs:
  plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: >
      ${{
        github.event_name == 'pull_request_review' ||
        (
          github.event_name == 'issue_comment' &&
          github.event.issue.pull_request &&
          (
            startsWith(github.event.comment.body, '/plan') ||
            startsWith(github.event.comment.body, '/PLAN')
          ) &&
          !contains(github.event.comment.body, '/apply')
        )
      }}
    steps:
      - name: Debug incoming event (issue_comment only)
        if: ${{ github.event_name == 'issue_comment' }}
        run: |
          set -euo pipefail
          echo "event_name=${{ github.event_name }}"
          echo "actor=${{ github.actor }}"
          echo "repo=${{ github.repository }}"
          echo "issue_number=${{ github.event.issue.number }}"
          echo "comment_id=${{ github.event.comment.id }}"
          echo "body<<'EOF'"
          echo "${{ github.event.comment.body }}"
          echo "EOF"
          echo
          echo "--- raw payload (truncated) ---"
          if command -v jq >/dev/null 2>&1; then
            jq -r '.' "$GITHUB_EVENT_PATH" | head -c 120000 || true
          else
            head -c 120000 "$GITHUB_EVENT_PATH" || true
          fi
          echo
          echo "--- end payload ---"
      - name: Resolve PR context
        id: prctx
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let pr = context.payload.pull_request;
            if (!pr && context.payload.issue && context.payload.issue.number) {
              const num = context.payload.issue.number;
              const { data } = await github.rest.pulls.get({ owner, repo, pull_number: num });
              pr = data;
            }
            core.setOutput('number', pr.number.toString());
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('url', pr.html_url);
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ steps.prctx.outputs.number }}/head
          fetch-depth: 0

      - name: Assume AWS Role using OIDC
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::649844050696:role/isd1-lab-iamrole-github-actions-deploy
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Build prompt file with PR context
        run: |
          set -euo pipefail
          BASE_REF="${{ steps.prctx.outputs.base_ref }}"
          HEAD_SHA="${{ steps.prctx.outputs.head_sha }}"
          # Resolve BASE_REF to a commit SHA (prefer remote tracking)
          if git rev-parse --verify -q "origin/${BASE_REF}" >/dev/null 2>&1; then
            BASE_SHA=$(git rev-parse "origin/${BASE_REF}")
          elif git rev-parse --verify -q "${BASE_REF}" >/dev/null 2>&1; then
            BASE_SHA=$(git rev-parse "${BASE_REF}")
          else
            # Fallback: use merge-base between HEAD and its remote base if possible
            # If merge-base fails, fall back to HEAD (no diff)
            BASE_SHA=$(git merge-base "${HEAD_SHA}" "origin/${BASE_REF}" 2>/dev/null || echo "${HEAD_SHA}")
          fi
          OUT="scripts/prompts/_runtime_pr_context.md"
          mkdir -p scripts/prompts

          # 1) Instruction preface (PLAN prompt)
          if [ -f scripts/prompts/pr_plan_agent_ja.md ]; then
            cat scripts/prompts/pr_plan_agent_ja.md > "$OUT"
            echo >> "$OUT"
          elif [ -f scripts/prompts/pr_improve_agent_ja.md ]; then
            # 旧版プロンプトが残っている場合の後方互換
            cat scripts/prompts/pr_improve_agent_ja.md > "$OUT"
            echo >> "$OUT"
          else
            echo "注意: scripts/prompts/pr_improve_agent_ja.md が見つかりません。PROMPT 環境変数の内容だけで進行します。" > "$OUT"
            echo >> "$OUT"
          fi

          # 2) Repository metadata
          {
            echo "### 対象リポジトリ情報"
            echo "- 組織/リポジトリ: ${{ github.repository }}"
            echo "- PR番号: ${{ steps.prctx.outputs.number }}"
            echo "- PR URL: ${{ steps.prctx.outputs.url }}"
            echo "- ブランチ: ${{ steps.prctx.outputs.head_ref }} → ${{ steps.prctx.outputs.base_ref }}"
            echo "- HEAD SHA: ${HEAD_SHA}"
            echo
            echo "### 変更ファイル一覧 (js/html)"
            git diff --name-status "${BASE_SHA}" "${HEAD_SHA}" -- '*.js' '*.html' || true
            echo
            echo "### 差分 (unified=0, 上限あり)"
            echo '```diff'
            git diff --unified=0 --no-color "${BASE_SHA}" "${HEAD_SHA}" -- '*.js' '*.html' | head -c 200000
            echo
            echo '```'
            echo
            echo "### 変更ファイル本文抜粋 (各 800 行まで, 最大 20 ファイル)"
            i=0
            for f in $(git diff --name-only --diff-filter=AM "${BASE_SHA}" "${HEAD_SHA}" -- '*.js' '*.html'); do
              i=$((i+1)); [ $i -gt 20 ] && break
              echo
              echo "#### ${f}"
              echo '```'
              git show "${HEAD_SHA}:${f}" | head -n 800 || true
              echo '```'
            done
          } >> "$OUT"

          echo "PROMPT_FILE=$OUT" >> "$GITHUB_ENV"

      - name: Append PR description and comments to prompt
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'scripts/prompts/_runtime_pr_context.md';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let prNumber = '${{ steps.prctx.outputs.number }}';
            prNumber = parseInt(prNumber, 10);
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });

            const prTitle = pr.title || '';
            const prBody = pr.body || '';
            let md = '';
            md += '\n### PR 詳細\n';
            md += `- タイトル: ${prTitle}\n`;
            md += '\n本文:\n\n';
            md += '```\n' + prBody + '\n```\n';

            // Fetch issue comments (Conversation tab)
            const issueComments = await github.paginate(github.rest.issues.listComments, {
              owner, repo, issue_number: prNumber, per_page: 50
            });
            if (issueComments.length) {
              md += '\n### 会話のコメント（抜粋）\n';
              const slice = issueComments.slice(0, 20);
              for (const c of slice) {
                const body = (c.body || '').toString();
                const trimmed = body.length > 1000 ? body.slice(0, 1000) + '\n...[truncated]...' : body;
                md += `- ${c.user?.login || 'unknown'} (${c.created_at})\n\n`;
                md += '```\n' + trimmed + '\n```\n';
              }
            }

            // Fetch review comments (code diff inline)
            const reviewComments = await github.paginate(github.rest.pulls.listReviewComments, {
              owner, repo, pull_number: prNumber, per_page: 50
            });
            if (reviewComments.length) {
              md += '\n### レビューコメント（コード行）抜粋\n';
              const slice = reviewComments.slice(0, 20);
              for (const c of slice) {
                const body = (c.body || '').toString();
                const trimmed = body.length > 800 ? body.slice(0, 800) + '\n...[truncated]...' : body;
                md += `- ${c.user?.login || 'unknown'} (${c.created_at}) in ${c.path}:${c.line || c.original_line || ''}\n\n`;
                md += '```\n' + trimmed + '\n```\n';
              }
            }

            // Fetch reviews (Approve/Comment/Request changes summaries)
            const reviews = await github.paginate(github.rest.pulls.listReviews, {
              owner, repo, pull_number: prNumber, per_page: 50
            });
            if (reviews.length) {
              md += '\n### レビュー提出（サマリー）\n';
              const slice = reviews.slice(0, 20);
              for (const r of slice) {
                const body = (r.body || '').toString();
                const trimmed = body.length > 800 ? body.slice(0, 800) + '\n...[truncated]...' : body;
                md += `- ${r.user?.login || 'unknown'} (${r.state}) ${r.submitted_at}\n\n`;
                md += '```\n' + trimmed + '\n```\n';
              }
            }

            fs.appendFileSync(path, '\n' + md, { encoding: 'utf8' });

      - name: Invoke Bedrock Agent via Python SDK (Plan)
        id: bedrock
        env:
          DEBUG_BEDROCK: "1"
          SESSION_ID: pr-${{ steps.prctx.outputs.number }}
          # 長時間ストリーミングに備えたタイムアウト調整（既定: 読み取り30分）
          BEDROCK_CONNECT_TIMEOUT: "10"
          BEDROCK_READ_TIMEOUT: "1800"
          BEDROCK_MAX_ATTEMPTS: "3"
          AGENT_ID: "HG3FHKX9GY"
          AGENT_ALIAS_ID: "Y7IXOPEHZ2"
          PROMPT_FILE: ${{ env.PROMPT_FILE }}
          # 対象リポジトリ/PR情報をプロンプトに注入するためのコンテキスト
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_FULL: ${{ github.repository }}
          PR_NUMBER: ${{ steps.prctx.outputs.number }}
          PR_URL: ${{ steps.prctx.outputs.url }}
          HEAD_REF: ${{ steps.prctx.outputs.head_ref }}
          BASE_REF: ${{ steps.prctx.outputs.base_ref }}
          HEAD_SHA: ${{ steps.prctx.outputs.head_sha }}
        run: |
          set -euo pipefail
          python3 scripts/bedrock_invoke_agent.py

      - name: Post plan as PR comment (with meta)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let body = '';
            try { body = fs.readFileSync('bedrock_agent_text.txt', 'utf8').trim(); } catch (e) {}
            if (!body) {
              let raw = '';
              try { raw = fs.readFileSync('bedrock_agent_output.json', 'utf8'); } catch (e) { raw = '(no output)'; }
              // truncate to avoid oversized comments
              const snippet = raw.length > 60000 ? raw.slice(0, 60000) + '\n...[truncated]...' : raw;
              body = 'Bedrockの出力が空でした。参考ログ:\n\n```\n' + snippet + '\n```';
            }
            const meta = [
              '```plan-meta',
              `session_id: pr-${{ steps.prctx.outputs.number }}`,
              `pr_number: ${{ steps.prctx.outputs.number }}`,
              `head_ref: ${{ steps.prctx.outputs.head_ref }}`,
              `base_ref: ${{ steps.prctx.outputs.base_ref }}`,
              '```'
            ].join('\n');
            body += '\n\n' + meta;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number('${{ steps.prctx.outputs.number }}'),
              body
            });
